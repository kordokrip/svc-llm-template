{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_USER INTERFACE_TOUCH SCREEN의 자재코드은(는)?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_USER INTERFACE_TOUCH SCREEN의 자재코드은(는) 1200147100입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for '4월'?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 유/무상 사유 값이 있다면 알려주세요.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 에스케이하이닉스 (주)의 라인 정보 알려줘.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 에스케이하이닉스 (주)의 라인은(는) M14A입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_AIO, DIO의 IN 자재 S/N은(는)?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_AIO, DIO의 IN 자재 S/N은(는) RIOAD-2503713입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR의 규격1 정보는 실제 업무에서 어떻게 활용할 수 있나요?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 규격1 정보는 자재 실적 관리, 보고, 지역별 분석, 운영 이슈 파악, 품질관리 등 다양한 실무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 운영단위은(는)?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 삼성전자(주)의 운영단위은(는) SEC Chiller입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 보증여부은(는)?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 보증여부은(는) 유상입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/repair --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for 'Setup일자'?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Material/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 7월 필드는 어떤 의미인가요?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 핵심 요약: - 1월: 14 - 2월: 14 - 3월: 21 - 4월: 25 - 5월: 14 - 6월: 13 - 7월: 6 - 8월: 7 - 9월: 25 - 10월: 13 - 11월: 10 - 12월: 15\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- KPI: 재고정확도/OTIF/리드타임/회전율·이상치 감시\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task material_kpi --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If '지급액' is missing, answer 'Not available'.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 21.스크러버 설치현황 총 설치 용량 합계는?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO 04 계약효력일 데이터 설명해줘.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 계약효력일 정보: 2025-04-01\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Unnamed: 4' 값은 무엇인가요?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 에스케이하이닉스 (주)\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation 종료시간 데이터 알려줘.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 종료시간: 10:30\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation 종료시간 데이터 알려줘.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 종료시간: 10:00\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row11의 보증기한은(는)?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row11의 보증기한은(는) 180입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation의 월 정보는 어디에 쓰이나요?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 월 정보는 수선 실적관리, 보고, 분석, 현장 대응 등 다양한 업무에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 23에 대한 기록은 무엇인가요?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of 'Unnamed: 57'?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 챔버10\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 고객사 정보가 필요한 이유는 무엇인가요?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row9 주간(20%) 값 알려줘.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%): 140080.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '계약번호' 값이 없으면 '정보 없음'으로만 답해 주세요.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치흐름: 자재검수→설치→시운전→검수/인수, 설치스펙·S/N 기록\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task install --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_USER INTERFACE_TOUCH SCREEN의 정산월는 언제/얼마/무엇입니까?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 정산월: 08월\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation S/N에 대해 설명해줘.\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Powerchip Technology Corporation의 S/N 정보는 PATROL입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}]}
{"input": {"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for '전교체일'?\"}]}"}]}, "preferred_output": [{"role": "assistant", "content": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check"}], "non_preferred_output": [{"role": "assistant", "content": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}]}
