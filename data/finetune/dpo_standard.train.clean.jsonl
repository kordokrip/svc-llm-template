{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 수량 정보 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 수량 정보: 1\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_AIO, DIO의 실적번호 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 실적번호 정보는 정산·자재관리, 실적분석, 예산/비용통제, 보고서, 실무 의사결정 등 다양한 용도로 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 19 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: ETC\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row12의 고객사 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION 라인 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 라인: S3B\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION 라인 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 라인: P2-F\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION 라인 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 라인: P2-D\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR의 자재명 정보는 실제 업무에서 어떻게 활용할 수 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재명 정보는 자재 실적 관리, 보고, 지역별 분석, 운영 이슈 파악, 품질관리 등 다양한 실무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: ELECTRIC_RY, TIMER_CONTROL RELAY의 라인은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: ELECTRIC_RY, TIMER_CONTROL RELAY의 라인은(는) P2-D입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field '단위'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 디첸첸(底倩倩)\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field '단위'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 1\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field '단위'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: EA\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field '단위'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: GSTH_D01\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Tell me the field 'Unnamed: 52'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: PM2(OUT)\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Chiller/Main 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: EAM3705 공정 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 공정: ETCH\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 칠러 특화: 냉각수 온도/유량·압축기·알람코드 기반 예지정비\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_chiller --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field 'FLAMELESS'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '프로젝트번호' 값이 없으면 '정보 없음'으로만 답해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 고객자재번호은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 고객자재번호은(는) K5003022-000595입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 고객자재번호은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 고객자재번호은(는) K5004011-000281입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 고객자재번호은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 고객자재번호은(는) K5003022-000278입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 고객자재번호은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 고객자재번호은(는) K5003022-000327입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 고객자재번호은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 고객자재번호은(는) K5004004-000199입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 고객자재번호은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 고객자재번호은(는) K5003022-000279입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 작업시작시간 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 작업시작시간은(는) 00:00입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/repair --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 작업시작시간 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 작업시작시간은(는) 09:30입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/repair --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 9 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 112\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치흐름: 자재검수→설치→시운전→검수/인수, 설치스펙·S/N 기록\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task install --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 모델명 항목의 값을 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: F16\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UNION ELBOW 계약효력일 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 계약효력일 정보: 2025-04-01\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UNION ELBOW 자재번호 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재번호: 1100012500\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row4 주간(20%) 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%) 정보: 297670.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 21 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Chiller/Main 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: EAM3702 고객사 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 고객사 정보: 삼성전자(주)\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 칠러 특화: 냉각수 온도/유량·압축기·알람코드 기반 예지정비\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_chiller --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '컨테이너번호' 값이 없으면 '정보 없음'으로만 답해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FOUNDRY의 유/무상은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FOUNDRY의 유/무상은(는) 유상입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row2의 주간(20%) 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%) 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of 'No.'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 1.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR의 자재창고 정보는 실제 업무에서 어떻게 활용할 수 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재창고 정보는 자재 실적 관리, 보고, 지역별 분석, 운영 이슈 파악, 품질관리 등 다양한 실무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR의 운영단위은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: UV-IR SENSOR의 운영단위은(는) GST CHINA(WUHAN) SCRUBBER입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 보증일자 값은?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 보증일자: 2011-07-03\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 보증일자 값은?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 보증일자: 2011-12-29\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 보증일자 값은?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 보증일자: 2011-06-30\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 자재번호 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재번호: 1100003100\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 자재번호 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재번호: 1100000600\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 자재번호 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재번호: 1100000900\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 자재번호 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재번호: 1100003800\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 자재번호 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재번호: 1100000400\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation 수선실적번호에 대해 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Powerchip Technology Corporation의 수선실적번호 정보는 RS20250880805입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation 수선실적번호에 대해 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Powerchip Technology Corporation의 수선실적번호 정보는 RS20250880803입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation 수선실적번호에 대해 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Powerchip Technology Corporation의 수선실적번호 정보는 RS20250880804입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If '총작업자수' is missing, answer 'Not available'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of '통화'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 4\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of '통화'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: PTG250703A02\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If available, provide '금액'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 챔버 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: JSON 요약: {\"진행상태\": \"반출완료\", \"보증여부\": \"유상\", \"다운타임\": \"0분\"}\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task repair_overseas_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Chiller/Main 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: EAM3705의 라인는 언제/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 라인: P3-D\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 칠러 특화: 냉각수 온도/유량·압축기·알람코드 기반 예지정비\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_chiller --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for 'PO번호'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 작업자.1 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 작업자.1은(는) 이경동입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/repair --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Unnamed: 48' 정보가 컨텍스트에 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '보증시작' 값이 없으면 '정보 없음'으로만 답해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 판매단가 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: JSON 요약: {\"고객사\": \"삼성전자(주)\", \"현장/교체\": \"교체수리\", \"총비용\": \"3,706,600원\"}\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리흐름: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task repair --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If missing, answer 'Not available' only.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row8의 ERP작업코드은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row8의 ERP작업코드은(는) EC000008입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 공정는 언제/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 공정: ETCH\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 스크러버 특화: 배기·흡착 매체 수명모델·DP/유량 임계값 경보\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_scrubber --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_AIO, DIO의 사업부 정보가 필요한 이유는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 사업부 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 비용 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 비용: 부품비\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field 'Unnamed: 4'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 12\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 단지은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 삼성전자(주)의 단지은(는) H2입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 통신사양 정보는 실무에 어떻게 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 통신사양 정보는 설비 운영/관리, 실적 집계, 라인/공정/제품별 분석, KPI/이슈 관리 등 다양한 업무에 쓰입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If available, provide 'OUT SN'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 고객사 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 고객사은(는) 삼성전자(주)입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION 작업(반입)일자 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 작업(반입)일자: 20250801\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION 작업(반입)일자 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 작업(반입)일자: 20250804\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for 'Unnamed: 10'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L의 보증여부 정보는 어디에 쓰이나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 보증여부 정보는 수선 실적관리, 보고, 분석, 현장 대응 등 다양한 업무에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 라인은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 라인은(는) P2-D입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_USER INTERFACE_TOUCH SCREEN 고객사 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사 정보: 삼성전자(주)\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_USER INTERFACE_TOUCH SCREEN의 사용수량 정보가 필요한 이유는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 사용수량 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO 04의 보증기한은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: LOK UNO 04의 보증기한은(는) 210입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FOUNDRY 할증유형 데이터 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 할증유형: 위험\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of '자재창고'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: A3(2F)_有偿\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row2 CTC 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: CTC: 0.7\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 에스케이하이닉스 (주)의 종료시간 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 에스케이하이닉스 (주)의 종료시간은(는) 10:10입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: MEMORY 할증유형 데이터 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 할증유형: 위험\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row4의 CTC 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: CTC 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: MEMORY 교체전 S/N 정보 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 교체전 S/N 정보: ES-15308\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: MEMORY 교체전 S/N 정보 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 교체전 S/N 정보: ES-15307\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row11의 운영단위 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 운영단위 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 3월에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Is there data for 'Unnamed: 59'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Summarize this transfer record in up to 5 lines.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: MALE CONNECTOR\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 고객사자재코드은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 고객사자재코드은(는) K3012001-006382입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What does '고장분류' mean in this dataset?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 계산 요약: 다운타임 0분\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task repair_overseas_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Unnamed: 3' 값이 없으면 '정보 없음'으로만 답해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Setup일자' 항목을 설명해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 삼성전자(주)\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_USER INTERFACE_TOUCH SCREEN의 사용일(유상기준) 정보가 필요한 이유는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 사용일(유상기준) 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 38에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of '저장위치'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: HANJIN HJTCTAI20250705\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row11의 야간(120%)은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row11의 야간(120%)은(는) 56650.0입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 4 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of '주차'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: GST CHINA(XIAN) SCRUBBER\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 만약 '통화코드' 값이 있으면 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치흐름: 자재검수→설치→시운전→검수/인수, 설치스펙·S/N 기록\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task install --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 단지 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 단지은(는) P2입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/repair --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 W/O번호은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 W/O번호은(는) PC51098303입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 W/O번호은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 W/O번호은(는) PC20661775입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row10 야간 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 야간 정보: 227630.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 라인은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 라인은(는) P2-F입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 라인은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 라인은(는) S3B입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR 사용일(전교체일기준) 값 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FEMALE CONNECTOR의 사용일(전교체일기준) 정보는 1103입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_AIO, DIO의 합계 정보가 필요한 이유는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 합계 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 원인분류 항목의 값을 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: CBM\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FLOW SENSOR 고객사 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Is there data for '시리얼번호'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 생산오더번호 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 1\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Quote the raw value of '세부조치내용'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 14.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Quote the raw value of '고객사'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: CVD\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: MEMORY의 작업(반입)일자 값은?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 작업(반입)일자: 2025-08-03\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SOLENOID BLOCK VAVLE 교체사유 값 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SOLENOID BLOCK VAVLE의 교체사유 정보는 단선으로인한 기능저하입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FOUNDRY 메인설비호기 데이터 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 메인설비호기: ESAPD03\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of '9월'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 8\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO BHD 06 보증기한 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 보증기한 정보: 210\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR 단지 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 단지: YMTC\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Is there data for '단가'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '4월' 항목을 설명해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 핵심 요약: - 1월: W/I - 2월: W/I - 3월: W/I - 4월: W/I - 5월: W/I - 6월: W/I - 7월: W/I - 8월: W/I - 9월: W/I - 10월: W/I - 11월: W/I - 12월: W/I\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task repair_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of 'Unnamed: 15'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: MKⅢ_저녹스_OF\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FOUNDRY의 Chamber은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FOUNDRY의 Chamber은(는) C입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 이 행에서 'Unnamed: 0' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 총수량\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Unnamed: 9' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: SBW-2939\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR의 유/무상은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FEMALE CONNECTOR의 유/무상은(는) 무상입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row10의 고객사작업코드 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사작업코드 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row10의 기본금액은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row10의 기본금액은(는) 133900입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of 'Invoice번호' in this row?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: JOINT BLOCK\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of 'Invoice번호' in this row?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 4\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of 'Invoice번호' in this row?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: JAQ100_FLOAT02\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of 'Invoice번호' in this row?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 12 USD\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 계약종료일 정보 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 계약종료일 정보: 2025-09-30\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 수선실적번호 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 수선실적번호은(는) RS20250880799입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 수선실적번호 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 수선실적번호은(는) RS20250880798입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 수선실적번호 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 수선실적번호은(는) RS20250880797입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 수선실적번호 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 수선실적번호은(는) RS20250880800입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row8 ERP작업코드 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: ERP작업코드: EC000008\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FOUNDRY 공정 정보 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 공정 정보: ETCH\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION W/O 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: W/O 정보: PC51095295\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION W/O 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: W/O 정보: PC20661775\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_AIO, DIO 판매단가 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 판매단가 정보: 564400.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Is there data for '작업일자'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the quantity of '수량'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: RC25-***-2600\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Tell me the field '메인설비모델'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: FLEX_HX+\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row9의 CTC은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row9의 CTC은(는) 0.7입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 수선실적번호 정보가 필요한 이유는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 수선실적번호 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Chiller/Main 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: EAM3705 세부공정 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 세부공정: METAL\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 칠러 특화: 냉각수 온도/유량·압축기·알람코드 기반 예지정비\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_chiller --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FLOW SENSOR의 자재위치 정보는 실제 업무에서 어떻게 활용할 수 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재위치 정보는 자재 실적 관리, 보고, 지역별 분석, 운영 이슈 파악, 품질관리 등 다양한 실무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field '메인설비Maker'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 16A\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row1의 고객사작업명 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사작업명 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO BHD 06 단위 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 단위: EACH\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of '유/무상' in this row?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 계산 요약: 총비용 1,100,062,602 KRW / 부품비 1,100,062,602 KRW / 부품비 비중 100.0%\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task repair_overseas_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: How long is '작업시작시간' (processing time)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: P3-D\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 정산등록번호는 언제/얼마/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 정산등록번호: CAL20250841999\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 정산등록번호는 언제/얼마/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 정산등록번호: CAL20250841952\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 정산등록번호는 언제/얼마/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 정산등록번호: CAL20250841951\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 정산등록번호는 언제/얼마/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 정산등록번호: CAL20250841966\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 챔버3 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 챔버3 정보: C\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 스크러버 특화: 배기·흡착 매체 수명모델·DP/유량 임계값 경보\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_scrubber --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 이 행에서 'Unnamed: 1' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치흐름: 자재검수→설치→시운전→검수/인수, 설치스펙·S/N 기록\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task install --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_USER INTERFACE_TOUCH SCREEN의 사업부 정보가 필요한 이유는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 사업부 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 입고일자 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: HANJIN HJTCTAI20250705\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 유/무상은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 유/무상은(는) 유상입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Warranty' 정보가 컨텍스트에 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 작업분류 값이 누락되면 '정보 없음'으로 답하세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 기타 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 2\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO BHD 06의 수량은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: LOK UNO BHD 06의 수량은(는) 1입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 8월 장비/모델 Top 5은?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: Top 5 장비/모델: : 21171건, FANB118_S1: 70건, TNCT03: 35건, EUT0B: 33건, DIA71: 33건\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리흐름: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task repair --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row10의 보증기한 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 보증기한 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Is there data for '작업시간'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '보증시작'에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치흐름: 자재검수→설치→시운전→검수/인수, 설치스펙·S/N 기록\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task install --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 이 행에서 '기타' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: SINGLE\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 이 행에서 '이동항번' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: NEX_F01\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Is there data for '작업 종류'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of '조치'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 기타\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row9 주간(20%) 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%) 정보: 140080.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation 종료일자 데이터 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 종료일자: 2025-08-07\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO BHD 06 고객사 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사 정보: 삼성전자(주)\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 57은(는) 어떻게 기록되어 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 챔버10\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 계약종료일는 언제/얼마/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 계약종료일: 2025-09-30\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 품목코드('현재 창고코드')는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: GEGR20250802573\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 품목코드('현재 창고코드')는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: NEXCHIP 现场(无偿)\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 품목코드('현재 창고코드')는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: EVA.GAO\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 규격에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SOLENOID BLOCK VAVLE의 라인은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SOLENOID BLOCK VAVLE의 라인은(는) X2입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field '자재명'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: PRESSURE SENSOR\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row8 주간(20%) 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%) 정보: 140080.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 16 값이 있다면 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Is there data for '연락처'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR S/N 값 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FEMALE CONNECTOR의 S/N 정보는 GBWS-2271입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FOUNDRY 라인 데이터 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 라인: S3B\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 SN은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 SN은(는) ES-09893입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 SN은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_PCB_COMMUNICATION의 SN은(는) ES-08682입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FLOW SENSOR 규격2 값 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FLOW SENSOR의 규격2 정보는 2~40lpm, 24VDC, 4~20mA입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FOUNDRY 수선인건비 정보 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 수선인건비 정보: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 칠러MODEL(PCS) 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 칠러MODEL(PCS): TES-R3100M-AE\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_AIO, DIO 유/무상 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 유/무상 정보: 유상\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Unnamed: 3'에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FLOW SENSOR의 모델명은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FLOW SENSOR의 모델명은(는) DRAGON-AB입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 W/O 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: W/O 정보는 정산·자재관리, 실적분석, 예산/비용통제, 보고서, 실무 의사결정 등 다양한 용도로 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Is there data for '규격2'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO BHD 04의 계약효력일는 언제/얼마/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 계약효력일: 2025-04-01\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 작업자.4 필드는 어떤 의미인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: JSON 요약: {\"진행상태\": \"실적등록\", \"다운타임\": \"0분\"}\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task repair_overseas_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 46 값이 있다면 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 칠러 수선 실적 기준으로 교체전 S/N 정보를 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 계산 요약: 총비용 52,530원\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리흐름: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task repair --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of '메인설비호기' in this row?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: S17\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 자재명 필드는 어떤 의미인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: JSON 요약: {\"고객사\": \"Micron Memory Taiwan Co., Ltd.(F16)\", \"모델명\": \"GAIA-I-D\", \"총비용\": \"0원\"}\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리흐름: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task repair --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row9 야간(70%) 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 야간(70%): 181280.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR의 설비위치은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FEMALE CONNECTOR의 설비위치은(는) RIGHT입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 7에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 이 행에서 'FLAMELESS' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 간단 요약: 보증여부:유상 / MK III:98 / DRAGON:48 / GAIA:0 / GAIA ORIGIN:10 / FLAMELESS:0 / 기타:0\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리흐름: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task repair --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Unnamed: 10' 항목을 설명해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 탕정\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for '단지'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row7 주간(20%) 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%): 140080.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO BHD 04 수량 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 수량 정보: 1\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR 교체사유 값 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: UV-IR SENSOR의 교체사유 정보는 자사 불합리 적발입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '9월' 항목을 설명해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치흐름: 자재검수→설치→시운전→검수/인수, 설치스펙·S/N 기록\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task install --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO BHD 04의 보증기한단위은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: LOK UNO BHD 04의 보증기한단위은(는) 일입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the movement type in '이동항번'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: CENTER O-RING\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FLOW SENSOR의 규격2 정보는 실제 업무에서 어떻게 활용할 수 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 규격2 정보는 자재 실적 관리, 보고, 지역별 분석, 운영 이슈 파악, 품질관리 등 다양한 실무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '10월' 항목을 설명해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 1월: 0 / 2월: 0 / 3월: 0 / 4월: 0 / 5월: 0 / 6월: 0 / 7월: 0 / 8월: 0 / 9월: 0 / 10월: 0 / 11월: 0 / 12월: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리흐름: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task repair --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 작업자.5에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR 자재위치 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재위치: R01\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row2의 보증기한 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 보증기한 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of '이동번호'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: GSTA01\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 보증기한단위 정보 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 보증기한단위 정보: 일\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 11월 항목의 값을 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If available, provide '합계'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 주차은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 주차은(는) 32주차입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Quote the raw value of '통화'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 1100792800.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Report에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION 사업부 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 사업부 정보: FOUNDRY\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: LOK UNO BHD 06 고객자재번호 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객자재번호 정보: K5003005-001548\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: REDUCING UNION의 계약효력일은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: REDUCING UNION의 계약효력일은(는) 2025-04-01입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 16은(는) 어떻게 기록되어 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: PC41914061\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: How is '합계' recorded?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 14,826,400 KRW\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 이 행에서 'WRS No.' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 계산 요약: 총비용 37,080 KRW\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task repair_overseas_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of '작업구분'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 현장 조치\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row12 운영단위 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 운영단위 정보: SEC Chiller\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L BAY에 대해 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L의 BAY 정보는 97입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If available, provide 'Unnamed: 13'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of 'Invoice번호'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: EA\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for 'Invoice번호'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_USER INTERFACE_TOUCH SCREEN의 유/무상은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: AUTOMATION_USER INTERFACE_TOUCH SCREEN의 유/무상은(는) 유상입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'PO번호'에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치흐름: 자재검수→설치→시운전→검수/인수, 설치스펙·S/N 기록\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task install --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 의뢰사유 값이 있다면 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 설비위치 값이 있다면 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '통화코드'에 대한 기록은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 에스케이하이닉스 (주)의 작성자 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 에스케이하이닉스 (주)의 작성자은(는) 이상운입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Chiller/Main 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: EAM3706 세부공정 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 세부공정 정보: METAL\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 칠러 특화: 냉각수 온도/유량·압축기·알람코드 기반 예지정비\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_chiller --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row2 야간(70%) 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 야간(70%) 정보: 226600.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row6 고객사작업코드 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사작업코드: EP100006\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Chiller/Main 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: EAM3704 챔버수량 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 챔버수량 정보: 3.0\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 칠러 특화: 냉각수 온도/유량·압축기·알람코드 기반 예지정비\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_chiller --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UNION 단가 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 단가 정보: 10900\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of 'Unnamed: 54'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: A\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row10의 주간(20%) 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%) 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row7 주간 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간 정보: 98880\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Chiller/Main 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: EAM3710 공정 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 공정: ETCH\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 칠러 특화: 냉각수 온도/유량·압축기·알람코드 기반 예지정비\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_chiller --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 만약 '컨테이너번호' 값이 있으면 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SOLENOID BLOCK VAVLE의 자재명은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SOLENOID BLOCK VAVLE의 자재명은(는) SOLENOID BLOCK VAVLE입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: WRS No. 필드는 어떤 의미인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: JSON 요약: {\"총비용\": \"30,900원\"}\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리흐름: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task repair --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L 단지에 대해 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L의 단지 정보는 SCS입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FLOW SENSOR 자재창고 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재창고: SCS_SCRUBBER(현장_유상)\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 비고은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 삼성전자(주)의 비고은(는) 특이사항 모듈ABC 2S 완료 PM카드 NULL LNG 점검 솔벨브 체크 완료 정상입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row6의 보증기한은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row6의 보증기한은(는) 180입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 만약 '보증기한' 값이 있으면 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row11의 고객사은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row11의 고객사은(는) 삼성전자(주)입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of 'Report'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 20250822_GBWS-0749_ (2)(有償).PDF\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_USER INTERFACE_TOUCH SCREEN 단지 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 단지: H4\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row8의 주간(20%) 정보는 어디에 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%) 정보는 인건비 산정, 근무/계약관리, 인사보고, 부서/직무분석, 실적평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FLOW SENSOR 공정 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 공정: CLEAN\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Repair 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 할증유형 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 계산 요약: 총비용 67,980원\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리흐름: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task repair --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR의 사용일(전교체일기준)는 언제인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 사용일(전교체일기준): 1461\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR의 설비위치 정보는 실제 업무에서 어떻게 활용할 수 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 설비위치 정보는 자재 실적 관리, 보고, 지역별 분석, 운영 이슈 파악, 품질관리 등 다양한 실무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_AIO, DIO의 사용일(유상기준) 정보가 필요한 이유는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 사용일(유상기준) 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 보증기한 값이 있다면 알려주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If '작업자3' is missing, answer 'Not available'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '금액' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: RC20250802417\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation 유지시간 데이터 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 유지시간: 00:30\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Inbound/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of '등록자' in this row?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 1210099000\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 입고흐름: PO→선적/통관→입고검수→상차/위치할당, 3-way match(PO/ASN/GR)\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inbound_overseas --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of '이동수량'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: TAICHUNG OFFICE(有偿)\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L 전 유상일자 데이터 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 전 유상일자: 2025-06-10\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SOLENOID BLOCK VAVLE의 자재실적일자은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SOLENOID BLOCK VAVLE의 자재실적일자은(는) 2025-08-07입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 해외 수선 실적 기준으로 라인 정보를 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 계산 요약: 총비용 1,301,771,701 KRW / 부품비 1,301,771,701 KRW / 부품비 비중 100.0%\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 수리: 접수→진단→부품교체/수리→검수→복구, SLA/재작업율 추적\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task repair_overseas_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row7 주간(20%) 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(20%) 정보: 140080.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SOLENOID BLOCK VAVLE 사용일(유상기준) 값 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SOLENOID BLOCK VAVLE의 사용일(유상기준) 정보는 1573입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Powerchip Technology Corporation 고객사 데이터 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 고객사: Powerchip Technology Corporation\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: ELECTRIC_RY, TIMER_CONTROL RELAY 수량 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 수량 정보: 1\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Unnamed: 0 정보가 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR의 자재창고은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FEMALE CONNECTOR의 자재창고은(는) YMTC_FAB1_SCR_现场(无偿)입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Material 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: AUTOMATION_PCB_COMMUNICATION의 자재명 정보가 필요한 이유는 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 자재명 정보는 자재 실적 분석, 운영관리, 보고서 작성 등에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task chiller/material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주) 반입일자 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: 반입일자: 2009-06-30\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L의 귀책구분 정보는 어디에 쓰이나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 귀책구분 정보는 수선 실적관리, 보고, 분석, 현장 대응 등 다양한 업무에 사용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L의 주차은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L의 주차은(는) 32주차입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row10 주간(70%) 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(70%) 정보: 227630.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR 설비위치 값 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: UV-IR SENSOR의 설비위치 정보는 RIGHT입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Material/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 6월 값만 간단히 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 1월: 0 / 2월: 0 / 3월: 0 / 4월: 0 / 5월: 0 / 6월: 0 / 7월: 0 / 8월: 0 / 9월: 0 / 10월: 0 / 11월: 0 / 12월: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- KPI: 재고정확도/OTIF/리드타임/회전율·이상치 감시\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task material_kpi --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 'Unnamed: 0' 항목을 설명해 주세요.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UNION ELBOW의 수량은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: UNION ELBOW의 수량은(는) 1입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L 공정에 대해 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L의 공정 정보는 CVD입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Equipment/Chiller/Main 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: EAM3709 설비순번 데이터 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 설비 질의에 표준 절차와 형식으로 일관 대응하여 가동률·SLA를 향상\n- 현황요약: 설비순번 정보: 1346\n# 아키텍처 분해\n- 입력(요청)→분류→진단데이터 수집→규칙/모델 평가→조치/피드백\n- 설비흐름: 설비등록→PM계획(Preventive)→점검/측정→이상감지→CM(수리)→검수/가동\n- CMMS: 설비ID/SN·부품 BOM·이력·SLA·담당자·권한체계 연동\n- 칠러 특화: 냉각수 온도/유량·압축기·알람코드 기반 예지정비\n# 품질속성 트레이드오프\n- 가용성/안전성 vs 비용: PM 주기·부품교체 기준과 다운타임 최소화 균형\n# DevOps/CI 제안\n- 시뮬레이션 로그 테스트·알람 룰 변경 diff·SLA·MTBF/MTTR 지표 자동화\n# Python 적합성\n- 적합: 시계열/알람해석·CMMS API·엣지 게이트웨이 연동 오케스트레이션 용이\n# 실행명령(예)\n- python equipment_pipeline.py --task equip_chiller --mode respond --sla-check", "rejected": "대충 증상 보며 수리하면 됩니다. 표준 절차나 기록은 중요하지 않습니다. Python이면 다 되니 구조는 필요 없고, 명령어는 여러 줄이 편합니다:\npython \n equipment_pipeline.py \n --task equip \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 에스케이하이닉스 (주)의 단지 정보 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 에스케이하이닉스 (주)의 단지은(는) 이천입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프로 모듈화\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task scrubber \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row7의 보증기한은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row7의 보증기한은(는) 180입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Transfer/Inventory/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Please explain the field '재고이동일'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: ELECTRIC_SMPS_고정출력\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 재고이동: 출고지→In-Transit→입고지, 락/격리·Cycle Count·추적성\n- 해외: Incoterms/리드타임·통관서류·관세코드 관리\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task inventory_transfer --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR의 전유상교체일 정보는 실제 업무에서 어떻게 활용할 수 있나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 전유상교체일 정보는 자재 실적 관리, 보고, 지역별 분석, 운영 이슈 파악, 품질관리 등 다양한 실무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: '작업시간' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 00:30\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Just give me the value of 'W/O'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: P2-D\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for '이동번호'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Equipment 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 삼성전자(주)의 Setup일자 정보는 실무에 어떻게 활용되나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: Setup일자 정보는 설비 운영/관리, 실적 집계, 라인/공정/제품별 분석, KPI/이슈 관리 등 다양한 업무에 쓰입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설비관리: 등록→PM계획→점검/이상감지→CM→검수/가동, CMMS 연동\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task equip --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: If available, provide 'Unnamed: 22'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산자재: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_material --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Overseas/KPI 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 이 행에서 '종료일자' 값은 무엇인가요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: SBW-3593\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- KPI: 가동률/처리량/에너지·케미컬 사용량·DP/유량 이상치 모니터링\n- 해외: 부품 리드타임·인코텀즈·통관서류·현지 규격/안전 기준 고려\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task overseas_perf --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: FEMALE CONNECTOR 사용일(유상기준) 값 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: FEMALE CONNECTOR의 사용일(유상기준) 정보는 1103입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row1 주간(70%) 값 알려줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 주간(70%): 175100.0\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Material/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UV-IR SENSOR의 자재실적일자은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: UV-IR SENSOR의 자재실적일자은(는) 2025-08-05입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재흐름: 입고→불출→소모·반납 추적 및 재고 정확도 모니터링\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/material/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Scrubber/Repair/Overseas 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L 사업부에 대해 설명해줘.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: SAMSUNG (CHINA) SEMICONDUCTOR CO.,L의 사업부 정보는 SAMSUNG (CHINA) SEMICONDUCTOR CO.,LTD입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 수리흐름: 접수→원인분석→수리→검수→완료 SLA 점검\n# 품질속성 트레이드오프\n- 유지보수성 vs 속도: 규칙 단순화와 예외루트 분리로 균형\n# DevOps/CI 제안\n- 규칙 유닛테스트·로깅·이상치 알림·지표(SLA/재고정확도/재작업율) 자동화\n# Python 적합성\n- 적합: Pandas/FastAPI/DB 연동으로 빠른 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task scrubber/repair/overseas --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Material/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: UNION의 계약효력일는 언제/얼마/무엇입니까?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: 계약효력일: 2025-04-01\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 자재: 입고→검수→불출/소모→반납·재고조정, 재고정확도 모니터링\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task material --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Install/Scrubber 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: 21.스크러버 설치현황 평균 설치→시운전 리드타임(일)은?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 스크러버 설치: 자재검수→설치→시운전→검수/인수, DP·유량 기준치 기록\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/OTIF/재고정확도) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task install_scrubber --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: MEMORY의 PARTS비 정보는 어디에 쓰이나요?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: PARTS비 정보는 정산관리, 비용 분석, 경영 보고, 예산 산정, 실적 평가 등 다양한 업무에 활용됩니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, 문서흐름(PO/세금계산서) 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task settlement --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Contract/Labor/Chiller 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Row2의 주간(20%)은(는)?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의의 핵심을 파악해 표준 절차로 일관되게 대응\n- 현황요약: Row2의 주간(20%)은(는) 175100.0입니다.\n# 아키텍처 분해\n- 입력(요청)→분류→검증→집행→피드백 루프\n- 계약: 기간·금액·승인체계·변경이력 관리 및 컴플라이언스 체크\n- 인건비: Rate card/OT 규칙·근태데이터 연동·코스트 센터 매핑\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 자동검증 강도와 처리지연 사이 균형\n# DevOps/CI 제안\n- 스키마 스냅샷·유닛테스트·이상치 알림·지표(SLA/재고정확도/원가차이) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI로 검증·정규화·API 오케스트레이션 용이\n# 실행명령(예)\n- python pipeline.py --task contract --mode respond --sla-check", "rejected": "그냥 상황 보면서 대충 처리하면 됩니다. 규칙이나 품질속성은 중요하지 않습니다. Python이면 다 되니 구조는 굳이 안 나눠도 되고, 명령어는 아래처럼 여러 줄이 가독성이 좋습니다:\npython \n pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Chiller/Install 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is the value of '10월' in this row?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 가동률·안전·SLA를 개선\n- 현황요약: W/I\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 설치흐름: 자재검수→설치→시운전→검수/인수, 설치스펙·S/N 기록\n# 품질속성 트레이드오프\n- 가용성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷 테스트·변경 diff·알람/지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python chiller_pipeline.py --task install --mode respond --sla-check", "rejected": "그냥 경험적으로 처리하면 됩니다. 표준 절차나 기록은 불필요합니다. Python이면 다 되니까 구조는 생략하고, 명령어는 여러 줄이 보기 좋습니다:\npython \n chiller_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: Tell me the field '운영단위'.\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: GST TAIWAN SCRUBBER\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
{"messages": [{"role": "user", "content": "{\"messages\": [{\"role\": \"user\", \"content\": \"도메인:Settlement/Statement 질문을 아키텍처 코치 톤으로 7줄 이내 요약·답변하고 실행지침 1개를 포함해줘. 규칙: 명령은 한 줄. 질문: What is recorded for '현지단가합계'?\"}]}"}], "chosen": "# 문제정의\n- 목적: 질의에 표준 절차·형식으로 일관 대응하여 정확성·추적성·SLA를 개선\n- 현황요약: 정보 없음 / Not available\n# 아키텍처 분해\n- 입력(요청)→분류→검증/진단→집행→피드백 루프\n- 정산: 수량×단가=공급가, 공급가+VAT=합계, PO/세금계산서 매칭\n# 품질속성 트레이드오프\n- 정확성/추적성 vs 속도: 검증 강도·배치주기와 처리지연 간 균형\n# DevOps/CI 제안\n- 스키마/룰 스냅샷·유닛테스트·이상치 알림·지표(SLA/MTBF/MTTR) 자동화\n# Python 적합성\n- 적합: Pandas/SQLAlchemy/FastAPI/타임시리즈로 파이프라인화 용이\n# 실행명령(예)\n- python ops_pipeline.py --task settlement_statement --mode respond --sla-check", "rejected": "경험적으로 처리하면 됩니다. 절차·검증은 나중에 해도 되고, 형식은 자유롭게 작성하세요. 명령어는 여러 줄이 보기 좋습니다:\npython \n ops_pipeline.py \n --task ops \n --mode respond"}
